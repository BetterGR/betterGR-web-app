import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Announcement = {
  __typename?: 'Announcement';
  content: Scalars['String']['output'];
  courseId: Scalars['ID']['output'];
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type Course = {
  __typename?: 'Course';
  announcements: Array<Announcement>;
  createdAt: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  grades: Array<Grade>;
  homework: Array<Homework>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  semester: Scalars['String']['output'];
  staff: Array<Staff>;
  students: Array<Student>;
  updatedAt: Scalars['String']['output'];
};

export type Grade = {
  __typename?: 'Grade';
  comments?: Maybe<Scalars['String']['output']>;
  courseId: Scalars['ID']['output'];
  gradeType: Scalars['String']['output'];
  gradeValue: Scalars['String']['output'];
  gradedAt: Scalars['String']['output'];
  gradedBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  itemId: Scalars['String']['output'];
  semester: Scalars['String']['output'];
  studentId: Scalars['ID']['output'];
  updatedAt: Scalars['String']['output'];
};

export type Homework = {
  __typename?: 'Homework';
  courseId: Scalars['ID']['output'];
  createdAt: Scalars['String']['output'];
  description: Scalars['String']['output'];
  dueDate: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
  workflow: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addStaffToCourse: Scalars['Boolean']['output'];
  addStudentToCourse: Scalars['Boolean']['output'];
  createAnnouncement: Announcement;
  createCourse: Course;
  createGrade: Grade;
  createHomework: Homework;
  createStaff: Staff;
  createStudent: Student;
  deleteAnnouncement: Scalars['Boolean']['output'];
  deleteCourse: Scalars['Boolean']['output'];
  deleteGrade: Scalars['Boolean']['output'];
  deleteStaff: Scalars['Boolean']['output'];
  deleteStudent: Scalars['Boolean']['output'];
  removeStaffFromCourse: Scalars['Boolean']['output'];
  removeStudentFromCourse: Scalars['Boolean']['output'];
  submitHomework: Submission;
  updateCourse: Course;
  updateGrade: Grade;
  updateStaff: Staff;
  updateStudent: Student;
};


export type MutationAddStaffToCourseArgs = {
  courseId: Scalars['ID']['input'];
  staffId: Scalars['ID']['input'];
};


export type MutationAddStudentToCourseArgs = {
  courseId: Scalars['ID']['input'];
  studentId: Scalars['ID']['input'];
};


export type MutationCreateAnnouncementArgs = {
  input: NewAnnouncement;
};


export type MutationCreateCourseArgs = {
  input: NewCourse;
};


export type MutationCreateGradeArgs = {
  input: NewGrade;
};


export type MutationCreateHomeworkArgs = {
  input: NewHomework;
};


export type MutationCreateStaffArgs = {
  input: NewStaff;
};


export type MutationCreateStudentArgs = {
  input: NewStudent;
};


export type MutationDeleteAnnouncementArgs = {
  announcementId: Scalars['ID']['input'];
  courseId: Scalars['ID']['input'];
};


export type MutationDeleteCourseArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteGradeArgs = {
  courseId: Scalars['ID']['input'];
  gradeType: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  itemId: Scalars['String']['input'];
  semester: Scalars['String']['input'];
  studentId: Scalars['ID']['input'];
};


export type MutationDeleteStaffArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteStudentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveStaffFromCourseArgs = {
  courseId: Scalars['ID']['input'];
  staffId: Scalars['ID']['input'];
};


export type MutationRemoveStudentFromCourseArgs = {
  courseId: Scalars['ID']['input'];
  studentId: Scalars['ID']['input'];
};


export type MutationSubmitHomeworkArgs = {
  homeworkId: Scalars['ID']['input'];
  studentId: Scalars['ID']['input'];
};


export type MutationUpdateCourseArgs = {
  id: Scalars['ID']['input'];
  input: UpdateCourse;
};


export type MutationUpdateGradeArgs = {
  id: Scalars['ID']['input'];
  input: UpdateGrade;
};


export type MutationUpdateStaffArgs = {
  id: Scalars['ID']['input'];
  input: UpdateStaff;
};


export type MutationUpdateStudentArgs = {
  id: Scalars['ID']['input'];
  input: UpdateStudent;
};

export type NewAnnouncement = {
  content: Scalars['String']['input'];
  courseId: Scalars['ID']['input'];
  title: Scalars['String']['input'];
};

export type NewCourse = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  semester: Scalars['String']['input'];
};

export type NewGrade = {
  comments?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
  gradeType: Scalars['String']['input'];
  gradeValue: Scalars['String']['input'];
  gradedBy?: InputMaybe<Scalars['ID']['input']>;
  itemId: Scalars['String']['input'];
  semester: Scalars['String']['input'];
  studentId: Scalars['ID']['input'];
};

export type NewHomework = {
  courseId: Scalars['ID']['input'];
  description: Scalars['String']['input'];
  dueDate: Scalars['String']['input'];
  title: Scalars['String']['input'];
  workflow: Scalars['String']['input'];
};

export type NewStaff = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  office?: InputMaybe<Scalars['String']['input']>;
  phoneNumber: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
};

export type NewStudent = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  announcement?: Maybe<Announcement>;
  announcementsByCourse: Array<Announcement>;
  course?: Maybe<Course>;
  courseGrades: Array<Grade>;
  courseStaff: Array<Staff>;
  courseStudents: Array<Student>;
  grade?: Maybe<Grade>;
  grades: Array<Grade>;
  homework?: Maybe<Homework>;
  homeworkByCourse: Array<Homework>;
  staff?: Maybe<Staff>;
  staffCourses: Array<Course>;
  student?: Maybe<Student>;
  studentCourseGrades: Array<Grade>;
  studentCourses: Array<Course>;
  studentSemesterGrades: Array<Grade>;
  submission?: Maybe<Submission>;
  submissionsByStudent: Array<Submission>;
};


export type QueryAnnouncementArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAnnouncementsByCourseArgs = {
  courseId: Scalars['ID']['input'];
};


export type QueryCourseArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCourseGradesArgs = {
  courseId: Scalars['ID']['input'];
  semester: Scalars['String']['input'];
};


export type QueryCourseStaffArgs = {
  courseId: Scalars['ID']['input'];
};


export type QueryCourseStudentsArgs = {
  courseId: Scalars['ID']['input'];
};


export type QueryGradeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGradesArgs = {
  courseId?: InputMaybe<Scalars['ID']['input']>;
  studentId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryHomeworkArgs = {
  id: Scalars['ID']['input'];
};


export type QueryHomeworkByCourseArgs = {
  courseId: Scalars['ID']['input'];
};


export type QueryStaffArgs = {
  id: Scalars['ID']['input'];
};


export type QueryStaffCoursesArgs = {
  staffId: Scalars['ID']['input'];
};


export type QueryStudentArgs = {
  id: Scalars['ID']['input'];
};


export type QueryStudentCourseGradesArgs = {
  courseId: Scalars['ID']['input'];
  semester: Scalars['String']['input'];
  studentId: Scalars['ID']['input'];
};


export type QueryStudentCoursesArgs = {
  studentId: Scalars['ID']['input'];
};


export type QueryStudentSemesterGradesArgs = {
  semester: Scalars['String']['input'];
  studentId: Scalars['ID']['input'];
};


export type QuerySubmissionArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySubmissionsByStudentArgs = {
  studentId: Scalars['ID']['input'];
};

export type Staff = {
  __typename?: 'Staff';
  courses: Array<Course>;
  createdAt: Scalars['String']['output'];
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  office?: Maybe<Scalars['String']['output']>;
  phoneNumber: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['String']['output'];
};

export type Student = {
  __typename?: 'Student';
  courses: Array<Course>;
  createdAt: Scalars['String']['output'];
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  phoneNumber: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type Submission = {
  __typename?: 'Submission';
  homeworkId: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  studentId: Scalars['ID']['output'];
  submittedAt: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type UpdateCourse = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  semester?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateGrade = {
  comments?: InputMaybe<Scalars['String']['input']>;
  gradeValue?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateStaff = {
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  office?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateStudent = {
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;



/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Announcement: ResolverTypeWrapper<Announcement>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Course: ResolverTypeWrapper<Course>;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  Grade: ResolverTypeWrapper<Grade>;
  Homework: ResolverTypeWrapper<Homework>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  Mutation: ResolverTypeWrapper<{}>;
  NewAnnouncement: NewAnnouncement;
  NewCourse: NewCourse;
  NewGrade: NewGrade;
  NewHomework: NewHomework;
  NewStaff: NewStaff;
  NewStudent: NewStudent;
  Query: ResolverTypeWrapper<{}>;
  Staff: ResolverTypeWrapper<Staff>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Student: ResolverTypeWrapper<Student>;
  Submission: ResolverTypeWrapper<Submission>;
  UpdateCourse: UpdateCourse;
  UpdateGrade: UpdateGrade;
  UpdateStaff: UpdateStaff;
  UpdateStudent: UpdateStudent;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Announcement: Announcement;
  Boolean: Scalars['Boolean']['output'];
  Course: Course;
  Float: Scalars['Float']['output'];
  Grade: Grade;
  Homework: Homework;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  Mutation: {};
  NewAnnouncement: NewAnnouncement;
  NewCourse: NewCourse;
  NewGrade: NewGrade;
  NewHomework: NewHomework;
  NewStaff: NewStaff;
  NewStudent: NewStudent;
  Query: {};
  Staff: Staff;
  String: Scalars['String']['output'];
  Student: Student;
  Submission: Submission;
  UpdateCourse: UpdateCourse;
  UpdateGrade: UpdateGrade;
  UpdateStaff: UpdateStaff;
  UpdateStudent: UpdateStudent;
};

export type DeferDirectiveArgs = {
  if?: Maybe<Scalars['Boolean']['input']>;
  label?: Maybe<Scalars['String']['input']>;
};

export type DeferDirectiveResolver<Result, Parent, ContextType = any, Args = DeferDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type AnnouncementResolvers<ContextType = any, ParentType extends ResolversParentTypes['Announcement'] = ResolversParentTypes['Announcement']> = {
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  courseId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CourseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Course'] = ResolversParentTypes['Course']> = {
  announcements?: Resolver<Array<ResolversTypes['Announcement']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  grades?: Resolver<Array<ResolversTypes['Grade']>, ParentType, ContextType>;
  homework?: Resolver<Array<ResolversTypes['Homework']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  semester?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  staff?: Resolver<Array<ResolversTypes['Staff']>, ParentType, ContextType>;
  students?: Resolver<Array<ResolversTypes['Student']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GradeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Grade'] = ResolversParentTypes['Grade']> = {
  comments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  courseId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  gradeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradeValue?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradedBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  itemId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  semester?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  studentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomeworkResolvers<ContextType = any, ParentType extends ResolversParentTypes['Homework'] = ResolversParentTypes['Homework']> = {
  courseId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dueDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  workflow?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  addStaffToCourse?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationAddStaffToCourseArgs, 'courseId' | 'staffId'>>;
  addStudentToCourse?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationAddStudentToCourseArgs, 'courseId' | 'studentId'>>;
  createAnnouncement?: Resolver<ResolversTypes['Announcement'], ParentType, ContextType, RequireFields<MutationCreateAnnouncementArgs, 'input'>>;
  createCourse?: Resolver<ResolversTypes['Course'], ParentType, ContextType, RequireFields<MutationCreateCourseArgs, 'input'>>;
  createGrade?: Resolver<ResolversTypes['Grade'], ParentType, ContextType, RequireFields<MutationCreateGradeArgs, 'input'>>;
  createHomework?: Resolver<ResolversTypes['Homework'], ParentType, ContextType, RequireFields<MutationCreateHomeworkArgs, 'input'>>;
  createStaff?: Resolver<ResolversTypes['Staff'], ParentType, ContextType, RequireFields<MutationCreateStaffArgs, 'input'>>;
  createStudent?: Resolver<ResolversTypes['Student'], ParentType, ContextType, RequireFields<MutationCreateStudentArgs, 'input'>>;
  deleteAnnouncement?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteAnnouncementArgs, 'announcementId' | 'courseId'>>;
  deleteCourse?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteCourseArgs, 'id'>>;
  deleteGrade?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteGradeArgs, 'courseId' | 'gradeType' | 'id' | 'itemId' | 'semester' | 'studentId'>>;
  deleteStaff?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteStaffArgs, 'id'>>;
  deleteStudent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteStudentArgs, 'id'>>;
  removeStaffFromCourse?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationRemoveStaffFromCourseArgs, 'courseId' | 'staffId'>>;
  removeStudentFromCourse?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationRemoveStudentFromCourseArgs, 'courseId' | 'studentId'>>;
  submitHomework?: Resolver<ResolversTypes['Submission'], ParentType, ContextType, RequireFields<MutationSubmitHomeworkArgs, 'homeworkId' | 'studentId'>>;
  updateCourse?: Resolver<ResolversTypes['Course'], ParentType, ContextType, RequireFields<MutationUpdateCourseArgs, 'id' | 'input'>>;
  updateGrade?: Resolver<ResolversTypes['Grade'], ParentType, ContextType, RequireFields<MutationUpdateGradeArgs, 'id' | 'input'>>;
  updateStaff?: Resolver<ResolversTypes['Staff'], ParentType, ContextType, RequireFields<MutationUpdateStaffArgs, 'id' | 'input'>>;
  updateStudent?: Resolver<ResolversTypes['Student'], ParentType, ContextType, RequireFields<MutationUpdateStudentArgs, 'id' | 'input'>>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  announcement?: Resolver<Maybe<ResolversTypes['Announcement']>, ParentType, ContextType, RequireFields<QueryAnnouncementArgs, 'id'>>;
  announcementsByCourse?: Resolver<Array<ResolversTypes['Announcement']>, ParentType, ContextType, RequireFields<QueryAnnouncementsByCourseArgs, 'courseId'>>;
  course?: Resolver<Maybe<ResolversTypes['Course']>, ParentType, ContextType, RequireFields<QueryCourseArgs, 'id'>>;
  courseGrades?: Resolver<Array<ResolversTypes['Grade']>, ParentType, ContextType, RequireFields<QueryCourseGradesArgs, 'courseId' | 'semester'>>;
  courseStaff?: Resolver<Array<ResolversTypes['Staff']>, ParentType, ContextType, RequireFields<QueryCourseStaffArgs, 'courseId'>>;
  courseStudents?: Resolver<Array<ResolversTypes['Student']>, ParentType, ContextType, RequireFields<QueryCourseStudentsArgs, 'courseId'>>;
  grade?: Resolver<Maybe<ResolversTypes['Grade']>, ParentType, ContextType, RequireFields<QueryGradeArgs, 'id'>>;
  grades?: Resolver<Array<ResolversTypes['Grade']>, ParentType, ContextType, Partial<QueryGradesArgs>>;
  homework?: Resolver<Maybe<ResolversTypes['Homework']>, ParentType, ContextType, RequireFields<QueryHomeworkArgs, 'id'>>;
  homeworkByCourse?: Resolver<Array<ResolversTypes['Homework']>, ParentType, ContextType, RequireFields<QueryHomeworkByCourseArgs, 'courseId'>>;
  staff?: Resolver<Maybe<ResolversTypes['Staff']>, ParentType, ContextType, RequireFields<QueryStaffArgs, 'id'>>;
  staffCourses?: Resolver<Array<ResolversTypes['Course']>, ParentType, ContextType, RequireFields<QueryStaffCoursesArgs, 'staffId'>>;
  student?: Resolver<Maybe<ResolversTypes['Student']>, ParentType, ContextType, RequireFields<QueryStudentArgs, 'id'>>;
  studentCourseGrades?: Resolver<Array<ResolversTypes['Grade']>, ParentType, ContextType, RequireFields<QueryStudentCourseGradesArgs, 'courseId' | 'semester' | 'studentId'>>;
  studentCourses?: Resolver<Array<ResolversTypes['Course']>, ParentType, ContextType, RequireFields<QueryStudentCoursesArgs, 'studentId'>>;
  studentSemesterGrades?: Resolver<Array<ResolversTypes['Grade']>, ParentType, ContextType, RequireFields<QueryStudentSemesterGradesArgs, 'semester' | 'studentId'>>;
  submission?: Resolver<Maybe<ResolversTypes['Submission']>, ParentType, ContextType, RequireFields<QuerySubmissionArgs, 'id'>>;
  submissionsByStudent?: Resolver<Array<ResolversTypes['Submission']>, ParentType, ContextType, RequireFields<QuerySubmissionsByStudentArgs, 'studentId'>>;
};

export type StaffResolvers<ContextType = any, ParentType extends ResolversParentTypes['Staff'] = ResolversParentTypes['Staff']> = {
  courses?: Resolver<Array<ResolversTypes['Course']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  office?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StudentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Student'] = ResolversParentTypes['Student']> = {
  courses?: Resolver<Array<ResolversTypes['Course']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubmissionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Submission'] = ResolversParentTypes['Submission']> = {
  homeworkId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  studentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  submittedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Announcement?: AnnouncementResolvers<ContextType>;
  Course?: CourseResolvers<ContextType>;
  Grade?: GradeResolvers<ContextType>;
  Homework?: HomeworkResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Staff?: StaffResolvers<ContextType>;
  Student?: StudentResolvers<ContextType>;
  Submission?: SubmissionResolvers<ContextType>;
};

export type DirectiveResolvers<ContextType = any> = {
  defer?: DeferDirectiveResolver<any, any, ContextType>;
};
